# Production Docker Compose Configuration with Redis
services:
  quip-db:
    image: postgres:16
    container_name: quip-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - quip_db_data_prod:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  quip-redis:
    image: redis:7-alpine
    container_name: quip-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server --requirepass \"$$REDIS_PASSWORD\" --appendonly yes --appendfsync everysec --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
        else
          echo 'ERROR: REDIS_PASSWORD must be set in production' && exit 1
        fi
      "
    volumes:
      - quip_redis_data_prod:/data
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  quip-backend-app:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
    container_name: quip-backend-app-prod
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod
      # Database Configuration
      DB_HOST: quip-db
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      # Redis Configuration
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_HOST: quip-redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      REDIS_TIMEOUT: ${REDIS_TIMEOUT:-3000}
      REDIS_CONNECT_TIMEOUT: ${REDIS_CONNECT_TIMEOUT:-3000}
      REDIS_SSL_ENABLED: ${REDIS_SSL_ENABLED:-false}
      # Redis Pool Configuration (Production optimized)
      REDIS_POOL_MAX_ACTIVE: ${REDIS_POOL_MAX_ACTIVE:-16}
      REDIS_POOL_MAX_IDLE: ${REDIS_POOL_MAX_IDLE:-8}
      REDIS_POOL_MIN_IDLE: ${REDIS_POOL_MIN_IDLE:-2}
      REDIS_POOL_MAX_WAIT: ${REDIS_POOL_MAX_WAIT:-1000}
      # Cache TTL Configuration (Production values)
      CACHE_DEFAULT_TTL: ${CACHE_DEFAULT_TTL:-3600000}
      CACHE_TTL_TOOL_WHITELIST: ${CACHE_TTL_TOOL_WHITELIST:-7200}
      CACHE_TTL_PROBLEM_CATEGORIES: ${CACHE_TTL_PROBLEM_CATEGORIES:-86400}
      CACHE_TTL_SERVER_DATA: ${CACHE_TTL_SERVER_DATA:-21600}
      CACHE_TTL_MEMBER_DATA: ${CACHE_TTL_MEMBER_DATA:-3600}
      CACHE_TTL_ASSISTANT_SESSION: ${CACHE_TTL_ASSISTANT_SESSION:-7200}
      CACHE_TTL_TEMPORARY_DATA: ${CACHE_TTL_TEMPORARY_DATA:-300}
      # Application Redis Settings
      APP_REDIS_DEFAULT_TTL: ${APP_REDIS_DEFAULT_TTL:-3600}
      APP_REDIS_HEALTH_INTERVAL: ${APP_REDIS_HEALTH_INTERVAL:-30000}
      # Retry and Circuit Breaker (Production settings)
      REDIS_RETRY_MAX_ATTEMPTS: ${REDIS_RETRY_MAX_ATTEMPTS:-5}
      REDIS_RETRY_DELAY: ${REDIS_RETRY_DELAY:-2000}
      REDIS_CB_FAILURE_THRESHOLD: ${REDIS_CB_FAILURE_THRESHOLD:-10}
      REDIS_CB_RECOVERY_TIMEOUT: ${REDIS_CB_RECOVERY_TIMEOUT:-60000}
      # Other Configuration
      AGENT_URL: ${AGENT_URL}
      # JVM Options for production
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    depends_on:
      quip-db:
        condition: service_healthy
      quip-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  quip-agent:
    build: ./agent
    container_name: quip-agent-prod
    ports:
      - "${AGENT_PORT:-5001}:5000"
    environment:
      MCP_SERVER_URL_QUIPMCPSERVER: ${MCP_SERVER_URL_QUIPMCPSERVER}
      MCP_SERVER_URL: ${MCP_SERVER_URL}
      BACKEND_URL: http://quip-backend-app:8080
    depends_on:
      quip-backend-app:
        condition: service_healthy
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  quip-mcp-server:
    build: ./mcp-server
    container_name: quip-mcp-server-prod
    ports:
      - "${MCP_SERVER_PORT:-8000}:8000"
    environment:
      HOST: 0.0.0.0
      PORT: 8000
    depends_on:
      quip-agent:
        condition: service_started
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  quip-frontend:
    build: ./frontend
    container_name: quip-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      BACKEND_URL: ${BACKEND_URL}
      NODE_ENV: production
    depends_on:
      quip-backend-app:
        condition: service_started
    networks:
      - quip-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  quip_db_data_prod:
    driver: local
  quip_redis_data_prod:
    driver: local

networks:
  quip-network-prod:
    driver: bridge