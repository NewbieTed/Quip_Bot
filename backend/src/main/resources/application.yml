spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  main:
    allow-bean-definition-overriding: true
  # Jackson configuration for JSON serialization
  jackson:
    serialization:
      write-dates-as-timestamps: false
  # Redis Configuration
  # Enable/disable Redis integration (default: true)
  redis:
    enabled: ${REDIS_ENABLED:true}
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:2000ms}
    connect-timeout: ${REDIS_CONNECT_TIMEOUT:2000ms}
    # Lettuce connection pool configuration
    lettuce:
      pool:
        max-active: ${REDIS_POOL_MAX_ACTIVE:8}    # Maximum number of connections
        max-idle: ${REDIS_POOL_MAX_IDLE:8}        # Maximum idle connections
        min-idle: ${REDIS_POOL_MIN_IDLE:0}        # Minimum idle connections
        max-wait: ${REDIS_POOL_MAX_WAIT:-1ms}     # Maximum wait time for connection
        time-between-eviction-runs: 30s           # Eviction thread run interval
      shutdown-timeout: 100ms
    # SSL configuration (uncomment for production with SSL)
    # ssl: true
    # ssl-bundle: redis-ssl
  
  # Spring Cache Configuration with Redis
  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_DEFAULT_TTL:3600000}  # Default TTL: 1 hour (in milliseconds)
      cache-null-values: false                    # Don't cache null values
      key-prefix: "quip:backend:"                 # Application-specific key prefix
      use-key-prefix: true                        # Enable key prefix usage
      enable-statistics: true                     # Enable cache statistics
    # Predefined cache names for different data types
    cache-names:
      - toolWhitelist      # Tool whitelist data (TTL: 1 hour)
      - problemCategories  # Problem categories (TTL: 24 hours)
      - serverData        # Server information (TTL: 6 hours)
      - memberData        # Member information (TTL: 30 minutes)
      - assistantSession  # Assistant session data (TTL: 2 hours)
      - temporaryData     # Short-term temporary data (TTL: 5 minutes)

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    redis:
      enabled: true

logging:
  file:
    name: logs/backend.log
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.quip.backend: ${LOG_LEVEL_QUIP_BACKEND:INFO}
    com.quip.backend.redis: ${LOG_LEVEL_REDIS:INFO}
    com.quip.backend.cache: ${LOG_LEVEL_CACHE:INFO}
    com.quip.backend.tool.sync: ${LOG_LEVEL_TOOL_SYNC:INFO}
    com.quip.backend.tool.consumer: ${LOG_LEVEL_TOOL_CONSUMER:INFO}
    com.quip.backend.tool.handler: ${LOG_LEVEL_TOOL_HANDLER:INFO}
    org.springframework: ${LOG_LEVEL_SPRING:WARN}
    org.springframework.cache: ${LOG_LEVEL_SPRING_CACHE:WARN}
    org.mybatis: ${LOG_LEVEL_MYBATIS:WARN}
    io.lettuce.core: ${LOG_LEVEL_LETTUCE:INFO}
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

mybatis:
  mapper-locations: classpath*:/com/quip/**/*.xml
  configuration:
    map-underscore-to-camel-case: true
    type-handlers:
      - com.quip.backend.config.handler.StringArrayTypeHandler

app:
  assets:
    base-url: http://localhost:8080/assets/
    base-path: src/main/resources/static/
  agent:
    url: ${AGENT_URL:http://localhost:5001}
  # Application-specific Redis configuration
  redis:
    default-ttl: ${APP_REDIS_DEFAULT_TTL:3600}              # Default TTL in seconds (1 hour)
    key-prefix: "quip:backend:"                             # Application key prefix
    health-check-interval: ${APP_REDIS_HEALTH_INTERVAL:30000}  # Health check interval in ms
    # Cache-specific TTL settings (in seconds)
    cache-ttl:
      tool-whitelist: ${CACHE_TTL_TOOL_WHITELIST:3600}      # 1 hour
      problem-categories: ${CACHE_TTL_PROBLEM_CATEGORIES:86400}  # 24 hours
      server-data: ${CACHE_TTL_SERVER_DATA:21600}           # 6 hours
      member-data: ${CACHE_TTL_MEMBER_DATA:1800}            # 30 minutes
      assistant-session: ${CACHE_TTL_ASSISTANT_SESSION:7200} # 2 hours
      temporary-data: ${CACHE_TTL_TEMPORARY_DATA:300}       # 5 minutes
    # Redis operation settings
    retry:
      max-attempts: ${REDIS_RETRY_MAX_ATTEMPTS:3}           # Maximum retry attempts
      delay: ${REDIS_RETRY_DELAY:1000}                      # Retry delay in ms
    # Circuit breaker settings
    circuit-breaker:
      failure-threshold: ${REDIS_CB_FAILURE_THRESHOLD:5}    # Failures before opening circuit
      recovery-timeout: ${REDIS_CB_RECOVERY_TIMEOUT:30000}  # Recovery timeout in ms
  # Tool synchronization configuration
  tool-sync:
    consumer:
      enabled: ${TOOL_SYNC_CONSUMER_ENABLED:true}           # Enable/disable tool update consumer
      polling-timeout: ${TOOL_SYNC_POLLING_TIMEOUT:5}       # Redis polling timeout in seconds
    # Sync recovery configuration for handling Redis message processing failures
    recovery:
      enabled: ${TOOL_SYNC_RECOVERY_ENABLED:true}           # Enable/disable sync recovery feature
      timeout: ${TOOL_SYNC_RECOVERY_TIMEOUT:10000}          # HTTP request timeout in milliseconds
      max-retries: ${TOOL_SYNC_RECOVERY_MAX_RETRIES:3}      # Maximum retry attempts for HTTP requests
      initial-delay: ${TOOL_SYNC_RECOVERY_INITIAL_DELAY:1000} # Initial retry delay in milliseconds
      # Failure detection thresholds
      failure-threshold:
        consecutive-failures: ${TOOL_SYNC_FAILURE_CONSECUTIVE:5}     # Consecutive failures before recovery
        invalid-messages: ${TOOL_SYNC_FAILURE_INVALID_MESSAGES:10}   # Invalid messages per minute threshold
        time-window: ${TOOL_SYNC_FAILURE_TIME_WINDOW:60000}          # Time window for failure detection (ms)
      # Agent HTTP endpoint configuration
      agent:
        base-url: ${TOOL_SYNC_AGENT_URL:http://localhost:5001}       # Agent HTTP server base URL
        resync-endpoint: ${TOOL_SYNC_AGENT_RESYNC_ENDPOINT:/api/tools/resync} # Resync endpoint path
        connect-timeout: ${TOOL_SYNC_AGENT_CONNECT_TIMEOUT:5000}     # Connection timeout in milliseconds
        read-timeout: ${TOOL_SYNC_AGENT_READ_TIMEOUT:10000}          # Read timeout in milliseconds