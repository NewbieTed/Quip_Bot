version: '3.8'

services:
  db:
    image: postgres:16
    container_name: quip-postgres-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql # This runs schema.sql on first container creation
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: quip-backend-app
    ports:
      - "8080:8080"
    environment:
      # Override DB_HOST to use the service name within the Docker network
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting app
    volumes:
      - .:/app # Mount the current directory to enable hot-reloading (if configured) and access gradlew
    command: ./gradlew bootRun # Run the Spring Boot application using bootRun
    # If you prefer to run the built JAR, you could use:
    # command: java -jar /app/build/libs/*.jar
    # In that case, you might not need the volume mount for .:/app if you don't need source code in the container.

volumes:
  postgres_data:
