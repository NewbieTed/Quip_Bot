import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { logger } from '../../utils/logger';

module.exports = {
	data: new SlashCommandBuilder()
		.setName('help')
		.setDescription('Show help documentation and command examples')
		.addStringOption(option =>
			option.setName('command')
				.setDescription('Get detailed help for a specific command')
				.setRequired(false)
				.addChoices(
					{ name: 'lenza-new', value: 'lenza-new' },
					{ name: 'lenza-resume', value: 'lenza-resume' },
					{ name: 'lenza-tools', value: 'lenza-tools' },
					{ name: 'lenza-status', value: 'lenza-status' },
					{ name: 'ping', value: 'ping' },
					{ name: 'urban-dictionary', value: 'urban-dictionary' }
				)
		),
	
	async execute(interaction: ChatInputCommandInteraction) {
		logger.info(`Help command: Starting execution for user ${interaction.user.username}`);
		
		try {
			// Defer reply immediately to avoid timeout
			await interaction.deferReply();
			logger.info('Help command: deferReply successful');

			const specificCommand = interaction.options.getString('command');

			if (specificCommand) {
				// Show detailed help for specific command
				await showCommandHelp(interaction, specificCommand);
			} else {
				// Show general help overview
				await showGeneralHelp(interaction);
			}

			logger.info('Help command: Execution completed successfully');

		} catch (error) {
			logger.error('Help command: Error during execution:', error);
			
			try {
				const errorMessage = '‚ùå Failed to display help information. Please try again later.';
				
				if (interaction.replied || interaction.deferred) {
					await interaction.editReply(errorMessage);
				} else {
					await interaction.reply(errorMessage);
				}
			} catch (replyError) {
				logger.error('Help command: Failed to send error message to user:', replyError);
			}
		}
		
		logger.info('Help command: Execution finished');
	},
};

async function showGeneralHelp(interaction: ChatInputCommandInteraction) {
	const helpEmbed = new EmbedBuilder()
		.setTitle('ü§ñ Lenza Bot - Command Help')
		.setDescription('Welcome to Lenza Bot! Here are all available commands organized by category.')
		.setColor(0x00AE86)
		.setTimestamp();

	// Lenza AI Commands
	helpEmbed.addFields({
		name: 'üß† Lenza AI Commands',
		value: [
			'`/lenza-new <message>` - Start a fresh conversation with Lenza AI',
			'`/lenza-resume <message>` - Continue your existing conversation with Lenza',
			'`/lenza-tools [action] [tool]` - Manage your tool whitelist preferences',
			'`/lenza-status` - Show bot health and backend connectivity status'
		].join('\n'),
		inline: false
	});

	// Utility Commands
	helpEmbed.addFields({
		name: 'üõ†Ô∏è Utility Commands',
		value: [
			'`/ping` - Check bot response time and latency',
			'`/urban-dictionary <term>` - Look up definitions from Urban Dictionary',
			'`/help [command]` - Show this help or get detailed help for a specific command'
		].join('\n'),
		inline: false
	});

	// Quick Start Guide
	helpEmbed.addFields({
		name: 'üöÄ Quick Start Guide',
		value: [
			'1. **New Conversation**: Use `/lenza-new` to start fresh with Lenza AI',
			'2. **Continue Chatting**: Use `/lenza-resume` to continue your conversation',
			'3. **Tool Management**: Use `/lenza-tools` to manage AI tool permissions',
			'4. **Get Help**: Use `/help <command>` for detailed command information'
		].join('\n'),
		inline: false
	});

	// Important Notes
	helpEmbed.addFields({
		name: '‚ö†Ô∏è Important Notes',
		value: [
			'‚Ä¢ Lenza may request permission to use tools - you can approve, deny, or trust them',
			'‚Ä¢ Conversations are maintained per channel - each channel has its own context',
			'‚Ä¢ Use `/lenza-new` to reset your conversation context in a channel',
			'‚Ä¢ Tool approvals timeout after 60 seconds and are automatically denied'
		].join('\n'),
		inline: false
	});

	// Add footer with additional help
	helpEmbed.setFooter({ 
		text: 'Use /help <command> for detailed examples ‚Ä¢ Developed for Lenza AI integration' 
	});

	// Create action row with helpful buttons
	const actionRow = new ActionRowBuilder<ButtonBuilder>()
		.addComponents(
			new ButtonBuilder()
				.setLabel('Bot Status')
				.setStyle(ButtonStyle.Secondary)
				.setEmoji('üìä')
				.setCustomId('help_status_button'),
			new ButtonBuilder()
				.setLabel('Tool Management')
				.setStyle(ButtonStyle.Secondary)
				.setEmoji('üîß')
				.setCustomId('help_tools_button')
		);

	await interaction.editReply({ 
		embeds: [helpEmbed],
		components: [actionRow]
	});
}

async function showCommandHelp(interaction: ChatInputCommandInteraction, command: string) {
	let helpEmbed: EmbedBuilder;

	switch (command) {
		case 'lenza-new':
			helpEmbed = new EmbedBuilder()
				.setTitle('üÜï /lenza-new Command Help')
				.setDescription('Start a fresh conversation with Lenza AI, clearing any previous context.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: '`/lenza-new <message>`',
						inline: false
					},
					{
						name: 'üìã Parameters',
						value: '‚Ä¢ **message** (required) - Your message to Lenza AI',
						inline: false
					},
					{
						name: 'üí° Examples',
						value: [
							'`/lenza-new Hello, can you help me with Python programming?`',
							'`/lenza-new What\'s the weather like today?`',
							'`/lenza-new Can you explain quantum computing in simple terms?`'
						].join('\n'),
						inline: false
					},
					{
						name: '‚ö†Ô∏è Notes',
						value: [
							'‚Ä¢ This creates a completely new conversation context',
							'‚Ä¢ Any previous conversation history in this channel will be ignored',
							'‚Ä¢ Lenza may request tool approvals during the conversation',
							'‚Ä¢ Messages are limited to 2000 characters'
						].join('\n'),
						inline: false
					}
				);
			break;

		case 'lenza-resume':
			helpEmbed = new EmbedBuilder()
				.setTitle('üîÑ /lenza-resume Command Help')
				.setDescription('Continue your existing conversation with Lenza AI, maintaining context.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: '`/lenza-resume <message>`',
						inline: false
					},
					{
						name: 'üìã Parameters',
						value: '‚Ä¢ **message** (required) - Your follow-up message to Lenza AI',
						inline: false
					},
					{
						name: 'üí° Examples',
						value: [
							'`/lenza-resume Can you elaborate on that last point?`',
							'`/lenza-resume What about the alternative approach?`',
							'`/lenza-resume Thanks! Can you help me with something else?`'
						].join('\n'),
						inline: false
					},
					{
						name: '‚ö†Ô∏è Notes',
						value: [
							'‚Ä¢ Maintains conversation history and context from previous messages',
							'‚Ä¢ If no previous conversation exists, it will start a new one',
							'‚Ä¢ Each channel maintains its own conversation context',
							'‚Ä¢ Use `/lenza-new` if you want to start fresh'
						].join('\n'),
						inline: false
					}
				);
			break;

		case 'lenza-tools':
			helpEmbed = new EmbedBuilder()
				.setTitle('üîß /lenza-tools Command Help')
				.setDescription('Manage your tool whitelist to control which tools Lenza can use automatically.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: [
							'`/lenza-tools` - View your current tool whitelist',
							'`/lenza-tools add <tool>` - Add a tool to your whitelist',
							'`/lenza-tools remove <tool>` - Remove a tool from your whitelist',
							'`/lenza-tools clear` - Clear your entire whitelist'
						].join('\n'),
						inline: false
					},
					{
						name: 'üí° Examples',
						value: [
							'`/lenza-tools` - Show current whitelisted tools',
							'`/lenza-tools add weather` - Allow weather tool automatically',
							'`/lenza-tools remove calculator` - Remove calculator from whitelist',
							'`/lenza-tools clear` - Remove all whitelisted tools'
						].join('\n'),
						inline: false
					},
					{
						name: '‚ö†Ô∏è Notes',
						value: [
							'‚Ä¢ Whitelisted tools are approved automatically without prompts',
							'‚Ä¢ You can also use "Approve & Trust" buttons during conversations',
							'‚Ä¢ Tool names are case-sensitive',
							'‚Ä¢ Clearing whitelist requires manual approval for all tools'
						].join('\n'),
						inline: false
					}
				);
			break;

		case 'lenza-status':
			helpEmbed = new EmbedBuilder()
				.setTitle('üìä /lenza-status Command Help')
				.setDescription('Display bot health information and backend connectivity status.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: '`/lenza-status`',
						inline: false
					},
					{
						name: 'üìã Information Displayed',
						value: [
							'‚Ä¢ Bot online status and configuration',
							'‚Ä¢ Backend API connectivity and response time',
							'‚Ä¢ Redis cache status (if enabled)',
							'‚Ä¢ Tool synchronization health',
							'‚Ä¢ Your user and channel information'
						].join('\n'),
						inline: false
					},
					{
						name: 'üí° Use Cases',
						value: [
							'‚Ä¢ Check if Lenza services are working properly',
							'‚Ä¢ Troubleshoot connection issues',
							'‚Ä¢ View current bot configuration',
							'‚Ä¢ Get technical support information'
						].join('\n'),
						inline: false
					}
				);
			break;

		case 'ping':
			helpEmbed = new EmbedBuilder()
				.setTitle('üèì /ping Command Help')
				.setDescription('Test bot responsiveness and measure latency.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: '`/ping`',
						inline: false
					},
					{
						name: 'üìã Information Displayed',
						value: [
							'‚Ä¢ Bot response time',
							'‚Ä¢ WebSocket heartbeat latency',
							'‚Ä¢ Simple connectivity test'
						].join('\n'),
						inline: false
					}
				);
			break;

		case 'urban-dictionary':
			helpEmbed = new EmbedBuilder()
				.setTitle('üìö /urban-dictionary Command Help')
				.setDescription('Look up definitions and meanings from Urban Dictionary.')
				.setColor(0x00AE86)
				.addFields(
					{
						name: 'üìù Usage',
						value: '`/urban-dictionary <term>`',
						inline: false
					},
					{
						name: 'üìã Parameters',
						value: '‚Ä¢ **term** (required) - The word or phrase to look up',
						inline: false
					},
					{
						name: 'üí° Examples',
						value: [
							'`/urban-dictionary yeet`',
							'`/urban-dictionary sus`',
							'`/urban-dictionary based`'
						].join('\n'),
						inline: false
					},
					{
						name: '‚ö†Ô∏è Content Warning',
						value: 'Urban Dictionary may contain explicit or inappropriate content. Use discretion in public channels.',
						inline: false
					}
				);
			break;

		default:
			helpEmbed = new EmbedBuilder()
				.setTitle('‚ùì Command Not Found')
				.setDescription(`Sorry, I don't have detailed help for the command "${command}".`)
				.setColor(0xFF6B6B)
				.addFields({
					name: 'üí° Suggestion',
					value: 'Use `/help` without parameters to see all available commands.',
					inline: false
				});
			break;
	}

	helpEmbed.setTimestamp();
	helpEmbed.setFooter({ 
		text: 'Use /help for general command overview ‚Ä¢ Developed for Lenza AI integration' 
	});

	await interaction.editReply({ embeds: [helpEmbed] });
}