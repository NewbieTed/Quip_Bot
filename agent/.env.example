# Agent Environment Configuration Example
# Copy this file to .env and update with your values

# API Keys and Secrets
OPENAI_API_KEY=your_openai_api_key_here

# Service URLs (Docker networking) - Agent connects to Backend and MCP Server
BACKEND_URL=http://quip-backend-app:8080

# MCP Server Configuration (Multi-server support)
# Primary MCP server (QuipMCPServer) - matches your current setup
MCP_SERVER_URL_QUIPMCPSERVER=http://quip-mcp-server:8000/mcp

# Global fallback for any servers without specific URLs
MCP_SERVER_URL=http://quip-mcp-server:8000/mcp

# Additional MCP servers can be added like:
# MCP_SERVER_URL_WEATHERMCPSERVER=http://weather-mcp-server:8001/mcp

# Server Configuration
DEBUG=false
HOST=0.0.0.0
PORT=5000

# Timeouts and Limits
HTTP_TIMEOUT=10
REQUEST_TIMEOUT=30

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=
REDIS_RETRY_MAX_ATTEMPTS=3
REDIS_RETRY_BASE_DELAY=1.0
REDIS_RETRY_MAX_DELAY=30.0

# Tool Sync HTTP Server Configuration
TOOL_SYNC_HTTP_ENABLED=true
TOOL_SYNC_HTTP_HOST=0.0.0.0
TOOL_SYNC_HTTP_PORT=5001
TOOL_SYNC_HTTP_TIMEOUT=10

# Tool Discovery Configuration
TOOL_DISCOVERY_TIMEOUT=10
TOOL_DISCOVERY_RETRY_ATTEMPTS=2
TOOL_DISCOVERY_RETRY_DELAY=1

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_FILE_PATH=logs/agent.log

# Environment-specific Logging Levels
LOG_LEVEL_REDIS=INFO
LOG_LEVEL_TOOL_SYNC=INFO
LOG_LEVEL_TOOL_DISCOVERY=INFO
LOG_LEVEL_MCP=INFO

# Local Development Override Examples:
# For local development, you might use:
# MCP_SERVER_URL_QUIPMCPSERVER=http://localhost:8000/mcp
# MCP_SERVER_URL_WEATHERMCPSERVER=http://localhost:8001/mcp
# REDIS_HOST=localhost
# TOOL_SYNC_AGENT_URL=http://localhost:5001

# Production Security Notes:
# - Never commit this file with real credentials
# - Use internal service names in production (e.g., http://quip-mcp-server:8000/mcp)
# - Consider using secrets management systems
# - Rotate credentials regularly
# - Use Redis AUTH in production environments
# - Consider Redis SSL/TLS for production